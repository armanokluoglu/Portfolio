{"version":3,"sources":["utils/prerender.js","assets/fonts/gotham-bold.woff2","components/Heading/index.js","components/Text/index.js","components/Section/index.js","components/Link/index.js","components/Image/index.js","components/ProjectLayout/index.js","pages/Uses/index.js"],"names":["prerender","navigator","userAgent","Heading","children","level","as","align","weight","className","rest","clampedLevel","Math","min","max","Component","Helmet","rel","href","GothamBold","crossorigin","classNames","Text","size","secondary","Section","forwardRef","ref","VALID_EXT","Link","target","isValidExtension","includes","split","pop","isAnchor","relValue","undefined","targetValue","RouterLink","to","onMouseUp","blurOnMouseUp","Image","ProjectHeader","title","description","linkLabel","url","roles","style","numToMs","Button","iconHoverShift","icon","length","map","role","index","initDelay","ProjectContainer","ProjectSection","light","first","fullHeight","backgroundOverlayOpacity","backgroundElement","ProjectSectionContent","width","ProjectSectionHeading","ProjectSectionText","ProjectTextRow","center","stretch","justify","noMargin","centerMobile","Uses","useScrollRestore","name","content"],"mappings":"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","file":"static/js/6.91ba9765.chunk.js","sourcesContent":["/**\n * Returns true if being prerendered by react-snap. Useful for stuff\n * that needs to only run client-side and not during prerendering\n */\nconst prerender = navigator.userAgent === 'ReactSnap';\nexport default prerender;\n","export default __webpack_public_path__ + \"static/media/gotham-bold.73ce573b.woff2\";","import { Fragment } from 'react';\nimport classNames from 'classnames';\nimport { Helmet } from 'react-helmet';\nimport GothamBold from 'assets/fonts/gotham-bold.woff2';\nimport './index.css';\n\nconst Heading = ({\n  children,\n  level = 1,\n  as,\n  align = 'auto',\n  weight = 'medium',\n  className,\n  ...rest\n}) => {\n  const clampedLevel = Math.min(Math.max(level, 0), 4);\n  const Component = as || `h${Math.max(clampedLevel, 1)}`;\n\n  return (\n    <Fragment>\n      {/* Conditionally load the bold font weight because we use it less frequently */}\n      {weight === 'bold' && (\n        <Helmet>\n          <link rel=\"preload\" href={GothamBold} as=\"font\" crossorigin=\"\" />\n          <style>\n            {`\n              @font-face {\n                font-family: 'Gotham';\n                font-weight: 700;\n                src: url(${GothamBold}) format('woff2');\n                font-display: swap;\n              }\n            `}\n          </style>\n        </Helmet>\n      )}\n      <Component\n        className={classNames(\n          className,\n          'heading',\n          `heading--align-${align}`,\n          `heading--level-${clampedLevel}`,\n          `heading--weight-${weight}`\n        )}\n        {...rest}\n      >\n        {children}\n      </Component>\n    </Fragment>\n  );\n};\n\nexport default Heading;\n","import classNames from 'classnames';\nimport './index.css';\n\nconst Text = ({\n  children,\n  size = 'm',\n  as: Component = 'p',\n  align = 'auto',\n  weight = 'auto',\n  secondary,\n  className,\n  ...rest\n}) => {\n  return (\n    <Component\n      className={classNames(\n        className,\n        'text',\n        `text--align-${align}`,\n        `text--size-${size}`,\n        `text--weight-${weight}`,\n        {\n          'text--secondary': secondary,\n        }\n      )}\n      {...rest}\n    >\n      {children}\n    </Component>\n  );\n};\n\nexport default Text;\n","import { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport './index.css';\n\nconst Section = forwardRef(\n  ({ as: Component = 'div', children, className, ...rest }, ref) => (\n    <Component className={classNames('section', className)} ref={ref} {...rest}>\n      {children}\n    </Component>\n  )\n);\n\nexport default Section;\n","import { Link as RouterLink } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { blurOnMouseUp } from 'utils/focus';\nimport './index.css';\n\n// File extensions that can be linked to\nconst VALID_EXT = ['txt', 'png', 'jpg'];\n\nconst Link = ({ rel, target, children, secondary, className, href, as, ...rest }) => {\n  const isValidExtension = VALID_EXT.includes(href?.split('.').pop());\n  const isAnchor = href?.includes('://') || href?.[0] === '#' || isValidExtension;\n  const relValue = rel || isAnchor ? 'noreferrer noopener' : undefined;\n  const targetValue = target || isAnchor ? '_blank' : undefined;\n  const Component = as || isAnchor ? 'a' : RouterLink;\n\n  return (\n    <Component\n      className={classNames('link', className, { 'link--secondary': secondary })}\n      rel={relValue}\n      href={isAnchor ? href : undefined}\n      to={!isAnchor ? href : undefined}\n      target={targetValue}\n      onMouseUp={blurOnMouseUp}\n      {...rest}\n    >\n      {children}\n    </Component>\n  );\n};\n\nexport default Link;\n","import { useState, useEffect, useRef, useCallback, Fragment } from 'react';\nimport classNames from 'classnames';\nimport { usePrefersReducedMotion, useInViewport } from 'hooks';\nimport { Button } from 'components/Button';\nimport Icon from 'components/Icon';\nimport { Transition } from 'react-transition-group';\nimport { reflow } from 'utils/transition';\nimport prerender from 'utils/prerender';\nimport { tokens } from 'components/ThemeProvider/theme';\nimport { msToNum, numToMs } from 'utils/style';\nimport { resolveVideoSrcFromSrcSet } from 'utils/image';\nimport { useTheme } from 'components/ThemeProvider';\nimport VisuallyHidden from 'components/VisuallyHidden';\nimport './index.css';\n\nconst Image = ({ className, style, reveal, delay = 0, raised, src, ...rest }) => {\n  // require returns an ES module in CRA 4\n  // https://github.com/facebook/create-react-app/issues/9831\n  if (src?.default) src = src.default;\n\n  const [loaded, setLoaded] = useState(false);\n  const { themeId } = useTheme();\n  const containerRef = useRef();\n  const inViewport = useInViewport(containerRef, reveal || !src?.endsWith('.mp4'));\n\n  const onLoad = useCallback(() => {\n    setLoaded(true);\n  }, []);\n\n  return (\n    <div\n      className={classNames('image', className, `image--${themeId}`, {\n        'image--in-viewport': inViewport,\n        'image--reveal': reveal,\n        'image--raised': raised,\n      })}\n      style={{ ...style, '--delay': numToMs(delay) }}\n      ref={containerRef}\n    >\n      <ImageElements\n        delay={delay}\n        onLoad={onLoad}\n        loaded={loaded}\n        inViewport={inViewport}\n        reveal={reveal}\n        src={src}\n        {...rest}\n      />\n    </div>\n  );\n};\n\nconst ImageElements = ({\n  onLoad,\n  loaded,\n  inViewport,\n  srcSet,\n  placeholder,\n  delay,\n  src,\n  alt,\n  play = true,\n  reveal,\n  ...rest\n}) => {\n  const prefersReducedMotion = usePrefersReducedMotion();\n  const [showPlaceholder, setShowPlaceholder] = useState(true);\n  const [playing, setPlaying] = useState(!prefersReducedMotion);\n  const [showPlayButton, setShowPlayButton] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n  const [placeholderSize, setPlaceholderSize] = useState();\n  const [videoSrc, setVideoSrc] = useState();\n  const placeholderRef = useRef();\n  const videoRef = useRef();\n  const isVideo = src?.endsWith('.mp4');\n  const imgSrc = src || srcSet?.split(' ')[0];\n  const showFullRes = !prerender && inViewport;\n\n  useEffect(() => {\n    const purgePlaceholder = () => {\n      setShowPlaceholder(false);\n    };\n\n    const placeholderElement = placeholderRef.current;\n    placeholderElement?.addEventListener('transitionend', purgePlaceholder);\n\n    return () => {\n      placeholderElement?.removeEventListener('transitionend', purgePlaceholder);\n    };\n  }, []);\n\n  useEffect(() => {\n    const resolveVideoSrc = async () => {\n      const resolvedVideoSrc = await resolveVideoSrcFromSrcSet(srcSet);\n      setVideoSrc(resolvedVideoSrc);\n    };\n\n    if (isVideo && srcSet) {\n      resolveVideoSrc();\n    } else if (isVideo) {\n      setVideoSrc(src);\n    }\n  }, [isVideo, src, srcSet]);\n\n  useEffect(() => {\n    if (placeholderRef?.current) {\n      const { width, height } = placeholderRef.current;\n\n      setPlaceholderSize({ width, height });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!videoRef.current || !videoSrc) return;\n\n    if (!play || !inViewport) {\n      setPlaying(false);\n      videoRef.current.pause();\n    } else if (inViewport && !prefersReducedMotion && !prerender) {\n      setPlaying(true);\n      videoRef.current.play();\n    }\n  }, [inViewport, play, prefersReducedMotion, videoSrc]);\n\n  const handlePlaceholderLoad = event => {\n    const { width, height } = event.target;\n    setPlaceholderSize({ width, height });\n  };\n\n  const togglePlaying = event => {\n    event.preventDefault();\n\n    if (videoRef.current.paused) {\n      setPlaying(true);\n      videoRef.current.play();\n    } else {\n      setPlaying(false);\n      videoRef.current.pause();\n    }\n  };\n\n  const handleShowPlayButton = () => {\n    setShowPlayButton(true);\n    setIsHovered(true);\n  };\n\n  const handleFocusPlayButton = () => {\n    setShowPlayButton(true);\n    setIsFocused(true);\n  };\n\n  return (\n    <div\n      className={classNames('image__element-wrapper', {\n        'image__element-wrapper--reveal': reveal,\n        'image__element-wrapper--in-viewport': inViewport,\n      })}\n      onMouseOver={isVideo ? handleShowPlayButton : undefined}\n      onFocus={isVideo ? handleShowPlayButton : undefined}\n      onMouseOut={isVideo ? () => setIsHovered(false) : undefined}\n      onBlur={isVideo ? () => setIsHovered(false) : undefined}\n      style={{ '--delay': numToMs(delay + 1000) }}\n      role=\"presentation\"\n    >\n      {isVideo && (\n        <Fragment>\n          <video\n            muted\n            loop\n            playsInline\n            className={classNames('image__element', { 'image__element--loaded': loaded })}\n            autoPlay={!prefersReducedMotion}\n            onLoadStart={onLoad}\n            aria-label={alt}\n            ref={videoRef}\n            {...rest}\n          >\n            <source src={src} type=\"video/mp4\" />\n          </video>\n          <Transition\n            in={isHovered || isFocused}\n            onExit={reflow}\n            onExited={() => setShowPlayButton(false)}\n            timeout={{ enter: 0, exit: msToNum(tokens.base.durationS) }}\n          >\n            {status => (\n              <VisuallyHidden visible={showPlayButton}>\n                <Button\n                  className={classNames('image__button', `image__button--${status}`)}\n                  onFocus={handleFocusPlayButton}\n                  onBlur={() => setIsFocused(false)}\n                  onClick={togglePlaying}\n                >\n                  <Icon icon={playing ? 'pause' : 'play'} />\n                  {playing ? 'Pause' : 'Play'}\n                </Button>\n              </VisuallyHidden>\n            )}\n          </Transition>\n        </Fragment>\n      )}\n      {!isVideo && (\n        <img\n          className={classNames('image__element', { 'image__element--loaded': loaded })}\n          onLoad={onLoad}\n          decoding=\"async\"\n          src={showFullRes ? imgSrc : undefined}\n          srcSet={showFullRes ? srcSet : undefined}\n          width={placeholderSize?.width}\n          height={placeholderSize?.height}\n          alt={alt}\n          {...rest}\n        />\n      )}\n      {showPlaceholder && (\n        <img\n          aria-hidden\n          className={classNames('image__placeholder', {\n            'image__placeholder--loaded': loaded,\n          })}\n          style={{ '--delay': numToMs(delay) }}\n          ref={placeholderRef}\n          src={placeholder}\n          onLoad={handlePlaceholderLoad}\n          width={placeholderSize?.width}\n          height={placeholderSize?.height}\n          decoding=\"async\"\n          alt=\"\"\n          role=\"presentation\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Image;\n","import { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport Image from 'components/Image';\nimport { Button } from 'components/Button';\nimport { useParallax } from 'hooks';\nimport prerender from 'utils/prerender';\nimport Section from 'components/Section';\nimport { numToPx, numToMs } from 'utils/style';\nimport Heading from 'components/Heading';\nimport Text from 'components/Text';\nimport './index.css';\n\nconst initDelay = 300;\n\nexport function ProjectHeader({\n  title,\n  description,\n  linkLabel = 'Visit website',\n  url,\n  roles,\n  className,\n}) {\n  return (\n    <Section className={classNames('project__header', className)}>\n      <div\n        className=\"project__header-content\"\n        style={{ '--initDelay': numToMs(initDelay) }}\n      >\n        <div className=\"project__details\">\n          <Heading\n            className={classNames('project__title', {\n              'project__title--entered': !prerender,\n            })}\n            level={2}\n            as=\"h1\"\n          >\n            {title}\n          </Heading>\n          <Text\n            className={classNames('project__description', {\n              'project__description--entered': !prerender,\n            })}\n            size=\"xl\"\n          >\n            {description}\n          </Text>\n          {!!url && (\n            <Button\n              secondary\n              iconHoverShift\n              className={classNames('project__link-button', {\n                'project__link-button--entered': !prerender,\n              })}\n              icon=\"chevronRight\"\n              href={url}\n            >\n              {linkLabel}\n            </Button>\n          )}\n        </div>\n        {!!roles?.length && (\n          <ul className=\"project__meta\">\n            {roles?.map((role, index) => (\n              <li\n                className={classNames('project__meta-item', {\n                  'project__meta-item--entered': !prerender,\n                })}\n                style={{ '--delay': numToMs(initDelay + 300 + index * 140) }}\n                key={role}\n              >\n                <Text secondary as=\"span\">\n                  {role}\n                </Text>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    </Section>\n  );\n}\n\nexport const ProjectContainer = ({ className, ...rest }) => (\n  <article className={classNames('project', className)} {...rest} />\n);\n\nexport const ProjectSection = forwardRef(\n  (\n    {\n      className,\n      light,\n      first,\n      fullHeight,\n      backgroundOverlayOpacity = 0.9,\n      backgroundElement,\n      children,\n      ...rest\n    },\n    ref\n  ) => (\n    <section\n      className={classNames('project__section', className, {\n        'project__section--light': light,\n        'project__section--full-height': fullHeight,\n      })}\n      ref={ref}\n      {...rest}\n    >\n      {!!backgroundElement && (\n        <div\n          className=\"project__section-background\"\n          style={{ '--opacity': backgroundOverlayOpacity }}\n        >\n          {backgroundElement}\n        </div>\n      )}\n      <Section\n        className={classNames('project__section-inner', {\n          'project__section-inner--first': first,\n        })}\n      >\n        {children}\n      </Section>\n    </section>\n  )\n);\n\nexport const ProjectBackground = ({ opacity = 0.7, className, entered, ...rest }) => {\n  const offset = useParallax(0.6);\n\n  return (\n    <div\n      className={classNames('project__background-image', className, {\n        'project__background-image--entered': entered,\n      })}\n    >\n      <div\n        className=\"project__background-image-element\"\n        style={{\n          '--offset': numToPx(offset),\n        }}\n      >\n        <Image alt=\"\" role=\"presentation\" {...rest} />\n      </div>\n      <div className=\"project__background-scrim\" style={{ '--opacity': opacity }} />\n    </div>\n  );\n};\n\nexport const ProjectImage = ({ className, ...rest }) => (\n  <div className={classNames('project__image', className)}>\n    <Image reveal delay={300} {...rest} />\n  </div>\n);\n\nexport const ProjectSectionContent = ({ className, width = 'l', ...rest }) => (\n  <div\n    className={classNames(\n      'project__section-content',\n      `project__section-content--width-${width}`,\n      className\n    )}\n    {...rest}\n  />\n);\n\nexport const ProjectSectionHeading = ({ className, level = 3, as = 'h2', ...rest }) => (\n  <Heading\n    className={classNames('project__section-heading', className)}\n    as={as}\n    level={level}\n    align=\"auto\"\n    {...rest}\n  />\n);\n\nexport const ProjectSectionText = ({ className, ...rest }) => (\n  <Text className={classNames('project__section-text', className)} size=\"l\" {...rest} />\n);\n\nexport const ProjectTextRow = ({\n  center,\n  stretch,\n  justify = 'center',\n  width = 'm',\n  noMargin,\n  className,\n  centerMobile,\n  ...rest\n}) => (\n  <div\n    className={classNames(\n      'project__text-row',\n      `project__text-row--justify-${justify}`,\n      `project__text-row--width-${width}`,\n      className,\n      {\n        'project__text-row--center': center,\n        'project__text-row--stretch': stretch,\n        'project__text-row--center-mobile': centerMobile,\n        'project__text-row--no-margin': noMargin,\n      }\n    )}\n    {...rest}\n  />\n);\n\nexport const ProjectSectionColumns = ({ className, alternate, centered, ...rest }) => (\n  <ProjectSectionContent\n    className={classNames('project__section-columns', {\n      'project__section-columns--alternate': alternate,\n      'project__section-columns--centered': centered,\n    })}\n    {...rest}\n  />\n);\n","import { Fragment } from 'react';\nimport { Helmet } from 'react-helmet';\nimport {\n  ProjectContainer,\n  ProjectHeader,\n  ProjectSection,\n  ProjectSectionContent,\n  ProjectSectionHeading,\n  ProjectSectionText,\n  ProjectTextRow,\n} from 'components/ProjectLayout';\nimport Link from 'components/Link';\nimport { useScrollRestore } from 'hooks';\nimport './index.css';\n\nconst Uses = () => {\n  useScrollRestore();\n\n  return (\n    <Fragment>\n      <Helmet>\n        <title>Uses | Arman Okluoglu</title>\n        <meta\n          name=\"description\"\n          content=\"A list of hardware and software I use to do my thing\"\n        />\n      </Helmet>\n      <ProjectContainer className=\"uses\">\n        <ProjectHeader\n          title=\"Uses\"\n          description=\"A somewhat comprehensive list of tools, apps, and more that I use on a daily basis to design and code things.\"\n        />\n        <ProjectSection first className=\"uses__section\">\n          <ProjectSectionContent>\n            <ProjectTextRow width=\"m\">\n              <ProjectSectionHeading>Development</ProjectSectionHeading>\n              <ProjectSectionText>\n                <ul>\n                  <li>\n                    I use{' '}\n                    <Link href=\"https://code.visualstudio.com\">Visual Studio Code</Link>{' '}\n                    as my text editor of choice.\n                  </li>\n                  <li>\n                    <Link href=\"https://www.google.com/chrome/\">\n                      Google Chrome\n                    </Link>{' '}\n                    with the React Dev Tools extension installed is my main browser for \n                    development and general use.\n                  </li>\n                  <li>\n                    <Link href=\"https://mozilla.org/en-US/firefox/developer\">\n                      Firefox Development Edition\n                    </Link>{' '}\n                    is my secondary browser for development.\n                  </li>\n                  <li>\n                    <Link href=\"https://reactjs.org\">React</Link> is my front end\n                    JavaScript library of choice. However, I am open to learning about\n                    and working with other libraries such as Angular and Vue.\n                  </li>\n                  <li>\n                    I'm mainly using vanilla CSS with{' '}\n                    <Link href=\"https://sass-lang.com/\">Sass</Link> or{' '}\n                    <Link href=\"https://postcss.org\">PostCSS</Link> to make it more flexible.\n                  </li>\n                </ul>\n              </ProjectSectionText>\n            </ProjectTextRow>\n          </ProjectSectionContent>\n        </ProjectSection>\n        <ProjectSection first className=\"uses__section\">\n          <ProjectSectionContent>\n            <ProjectTextRow width=\"m\">\n              <ProjectSectionHeading>Design</ProjectSectionHeading>\n              <ProjectSectionText>\n                <ul>\n                  <li>\n                    <Link href=\"https://figma.com\">Figma</Link> is a tool I have just started learning \n                    and I think it is a valuable asset to have for the web/mobile design process.\n                  </li>\n                  <li>\n                    I use Adobe Photoshop as an all-rounder tool and have been using it \n                    since high school so I am quite familiar with it.\n                  </li>\n                </ul>\n              </ProjectSectionText>\n            </ProjectTextRow>\n          </ProjectSectionContent>\n        </ProjectSection>\n      </ProjectContainer>\n    </Fragment>\n  );\n};\n\nexport default Uses;\n"],"sourceRoot":""}